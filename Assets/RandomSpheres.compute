#pragma kernel CSMain
#pragma kernel DiscardSpheres

struct Sphere {
    float3 position;
    float radius;
    float3 albedo;
    float3 specular;
};

RWStructuredBuffer<Sphere> _SphereBuffer;
float2 _SphereRadius;
float _PlacementRadius;
uint _Seed;

uint rng_state;

//Hash invented by Thomas Wang
uint wang_hash(uint seed) {
    seed = (seed ^ 61) ^ (seed >> 16);
    seed *= 9;
    seed = seed ^ (seed >> 4);
    seed *= 0x27d4eb2d;
    seed = seed ^ (seed >> 15);

    return seed;
}

//Xorshift algorithm from George Marsaglia's paper
uint rand_xorshift() {
    rng_state ^= (rng_state << 13);
    rng_state ^= (rng_state >> 17);
    rng_state ^= (rng_state << 5);

    return rng_state;
}

float randValue() {
    return rand_xorshift() * (1.0 / 4294967296.0);
}

float2 randPosInUnitCircle() {
    return float2((randValue() * 2.0f) - 1.0f, (randValue() * 2.0f) - 1.0f);
}


[numthreads(8,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID) {
    Sphere sphere;
    rng_state = wang_hash(_Seed + id.x);

    sphere.radius = _SphereRadius.x + randValue() * (_SphereRadius.y - _SphereRadius.x);
    float2 randPos = randPosInUnitCircle() * _PlacementRadius;
    sphere.position = float3(randPos.x, sphere.radius, randPos.y);

    float3 color = float3(randValue(), randValue(), randValue());
    int metal = randValue() < 0.5f ? 1 : 0;
    sphere.albedo = metal ? float3(0, 0, 0) : color;
    sphere.specular = metal ? color : float3(0.04f, 0.04f, 0.04f);

    _SphereBuffer[id.x] = sphere;
}

[numthreads(8, 1, 1)]
void DiscardSpheres(uint3 id : SV_DispatchThreadID) {
    uint numSpheres, stride;
    _SphereBuffer.GetDimensions(numSpheres, stride);

    Sphere sphere = _SphereBuffer[id.x];
    for (uint i = id.x + 1; i < numSpheres; ++i) {
        Sphere otherSphere = _SphereBuffer[i];
        float minDist = otherSphere.radius + sphere.radius;
        float3 diffPos = otherSphere.position - sphere.position;
        float mag = dot(diffPos, diffPos);

        if (mag < minDist * minDist) {
            sphere.radius = 0.0f;
            break;
        }
    }

    _SphereBuffer[id.x] = sphere;
}